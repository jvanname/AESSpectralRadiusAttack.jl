# Here, we use the LSRDR dimensionality reduction and other spectral techniques to evaluate the cryptographic security of the AES block cipher.

using SparseArrays,LinearAlgebra,Statistics,KrylovKit

function unorderedpairsspecrad(table)
n=length(table[1]);
m=Int(n*(n-1)/2);
arr=[]; for i in 1:n for j in i+1:n push!(arr,[i,j]); end; end;
mat=zeros(Int64,n,n); for i in 1:length(arr) mat[arr[i][1],arr[i][2]]=i; end; mat+=transpose(mat)
function expand(list) arm=[]; for i in 1:m push!(arm,Int(mat[list[arr[i][1]],list[arr[i][2]]])); end; return arm; end;
xx=spzeros(m,m); for i in 1:length(table) xx+=sparse(1:m,expand(table[i]),ones(m)); end;
init=randn(m);
return abs(KrylovKit.eigsolve(xx,init,2,:LM,krylovdim=30)[1][2]);
end;


encrypttable=[]; for i in 1:256 for j in 1:4 perm=[]; for k in 1:256 x=zeros(UInt8,16); x[1]=UInt8(k-1); SubBytes(x); for ll in 2:16 x[ll]*=0; end; MixColumns(x); push!(perm,1+Int(gadd(UInt8(i-1),x[j])));  end; push!(encrypttable,perm); end; end;

decrypttable=[]; for i in 1:256 for j in 1:4 perm=[]; for k in 1:256 x=zeros(UInt8,16); x[1]=UInt8(k-1); for ll in 2:16 x[ll]*=0; end; InvMixColumns(x); InvSubBytes(x); push!(perm,1+Int(gadd(UInt8(i-1),x[j])));  end; push!(decrypttable,perm); end; end;

sboxtable=[]; for i in 1:256 perm=[]; for k in 1:256 x=zeros(UInt8,16); x[1]=UInt8(k-1); for ll in 2:16 x[ll]*=0; end; SubBytes(x); push!(perm,1+Int(gadd(UInt8(i-1),x[1])));  end; push!(sboxtable,perm); end;

function inv(x) y=gmul(x,x); z=gmul(x,x); for i in 1:6 z=gmul(z,z); y=gmul(y,z); end; return y; end;
invtable=[]; for i in 1:256 perm=[]; for k in 1:256 x=zeros(UInt8,16); x[1]=UInt8(k-1); for ll in 2:16 x[ll]*=0; end; SubBytes(x); push!(perm,1+Int(gadd(UInt8(i-1),x[1])));  end; push!(invtable,perm); end;


# One should get about 45.6864262007241 for unorderedpairsspecrad(encrypttable).
# The ideal value for unorderedpairsspecrad(encrypttable) should be around 32 or smaller.
# The ideal value for unorderedpairsspecrad(encrypttable) given that the mixcolumns polynomial repeats a coefficient should be around sqrt(1536)=39.1918358845... or smaller.

# One should get about 33.5970180369421 for unorderedpairsspecrad(encrypttable).
# The ideal value for unorderedpairsspecrad(encrypttable) should be around 32 or smaller.

# OBSERVATIONS ABOUT THE SECURITY OF AES ROUND FUNCTION.

# If we replace the Rijndael S-box with a random S-box for encryption mode, then we can get a value of about 60 for unorderedpairsspecrad(encrypttable) or so which indicates that the Rijndael S-box is much more secure than
# random S-boxes.

# The value of unorderedpairsspecrad(sboxtable) is 16.41493572768185. An ideal value for unorderedpairsspecrad(sboxtable) should be around or below 16. This indicates that the
# Rijndael S-box has been properly optimized for cryptographic security.

# The value of unorderedpairsspecrad(sboxtable) tends to increase if we multiply the Rijndael S-box with a transposition. This indicates that the
# Rijndael S-box has been properly optimized for cryptographic security.

# The value of unorderedpairsspecrad(sboxtable) will be around 24 or so if we replace the Rijndael S-box with a random S-box.

# The value of unorderedpairsspecrad(invtable) should be precisely 18. This indicates that invtable satisfies some of the properties that an S-box should satisfy, but
# invtable is an S-box that can be studied mathematically.




